{"remainingRequest":"C:\\Users\\Administrador\\Happy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrador\\Happy\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrador\\Happy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrador\\Happy\\src\\views\\contract.vue?vue&type=template&id=52dd13a8&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrador\\Happy\\src\\views\\contract.vue","mtime":1578596764970},{"path":"C:\\Users\\Administrador\\Happy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1578077751119},{"path":"C:\\Users\\Administrador\\Happy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1578077754156},{"path":"C:\\Users\\Administrador\\Happy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1578077751119},{"path":"C:\\Users\\Administrador\\Happy\\node_modules\\vue-loader\\lib\\index.js","mtime":1578077754156}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}