{"remainingRequest":"/Users/andreamonroy/Happy/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/andreamonroy/Happy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andreamonroy/Happy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andreamonroy/Happy/src/views/contract.vue?vue&type=template&id=52dd13a8&scoped=true&","dependencies":[{"path":"/Users/andreamonroy/Happy/src/views/contract.vue","mtime":1578429743735},{"path":"/Users/andreamonroy/Happy/node_modules/cache-loader/dist/cjs.js","mtime":1575991294243},{"path":"/Users/andreamonroy/Happy/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576527882455},{"path":"/Users/andreamonroy/Happy/node_modules/cache-loader/dist/cjs.js","mtime":1575991294243},{"path":"/Users/andreamonroy/Happy/node_modules/vue-loader/lib/index.js","mtime":1576527882455}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}